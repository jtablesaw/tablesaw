/*
 * generated by Xtext 2.12.0
 */
package tablesaw.xtext.jvmmodel

import com.google.inject.Inject
import org.eclipse.xtext.common.types.JvmGenericType
import org.eclipse.xtext.common.types.JvmVisibility
import org.eclipse.xtext.common.types.util.TypeReferences
import org.eclipse.xtext.xbase.jvmmodel.AbstractModelInferrer
import org.eclipse.xtext.xbase.jvmmodel.IJvmDeclaredTypeAcceptor
import org.eclipse.xtext.xbase.jvmmodel.JvmTypesBuilder
import tablesaw.xtext.xaw.XMethod
import tablesaw.xtext.xaw.Xaw

/**
 * <p>Infers a JVM model from the source model.</p> 
 *
 * <p>The JVM model should contain all elements that would appear in the Java code 
 * which is generated from the source model. Other models link against the JVM model rather than the source model.</p>     
 */
class XawJvmModelInferrer extends AbstractModelInferrer {

	/**
	 * convenience API to build and initialize JVM types and their members.
	 */
	@Inject extension JvmTypesBuilder
	@Inject extension TypeReferences

	def dispatch void infer(Xaw xaw, IJvmDeclaredTypeAcceptor acceptor, boolean isPreIndexingPhase) {
		val clazz = xaw.toClass(xaw.QName) [
			superTypes += typeRef(Runnable)
		]
		acceptor.accept(clazz) [
			members += xaw.toMethod("run", typeRef(Void.TYPE), [
				visibility = JvmVisibility.PUBLIC
				val method = it
				body = xaw
			])
			members += xaw.toMethod("main", typeRef(Void.TYPE)) [
				visibility = JvmVisibility.PUBLIC
				static = true
				parameters += xaw.toParameter("args", createArrayType(typeRef(String)))
				body = [
					append('''new «clazz.simpleName»().run();''')
				]
			]
			xaw.methods.forEach[inferMethod(clazz, it)]
		]
	}

	def inferMethod(JvmGenericType jvmClass, XMethod xMethod) {
		jvmClass.members += xMethod.toMethod(xMethod.name, xMethod.returnType) [
			visibility = JvmVisibility.PRIVATE
			var paramNum = 1
			for (parameter : xMethod.parameters) {
				val formalParameter = parameter.toParameter(parameter.name ?: ("arg" + paramNum), parameter.parameterType)
				parameters += formalParameter
				paramNum++
			}
			body = xMethod.body
		]
	}
}
