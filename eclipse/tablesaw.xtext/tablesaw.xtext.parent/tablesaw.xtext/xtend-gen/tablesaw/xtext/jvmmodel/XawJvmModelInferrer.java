/**
 * generated by Xtext 2.12.0
 */
package tablesaw.xtext.jvmmodel;

import com.google.inject.Inject;
import java.util.Arrays;
import java.util.function.Consumer;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.common.types.JvmFormalParameter;
import org.eclipse.xtext.common.types.JvmGenericType;
import org.eclipse.xtext.common.types.JvmMember;
import org.eclipse.xtext.common.types.JvmOperation;
import org.eclipse.xtext.common.types.JvmTypeReference;
import org.eclipse.xtext.common.types.JvmVisibility;
import org.eclipse.xtext.common.types.util.TypeReferences;
import org.eclipse.xtext.xbase.compiler.output.ITreeAppendable;
import org.eclipse.xtext.xbase.jvmmodel.AbstractModelInferrer;
import org.eclipse.xtext.xbase.jvmmodel.IJvmDeclaredTypeAcceptor;
import org.eclipse.xtext.xbase.jvmmodel.JvmTypesBuilder;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import tablesaw.xtext.xaw.XMethod;
import tablesaw.xtext.xaw.Xaw;

/**
 * <p>Infers a JVM model from the source model.</p>
 * 
 * <p>The JVM model should contain all elements that would appear in the Java code
 * which is generated from the source model. Other models link against the JVM model rather than the source model.</p>
 */
@SuppressWarnings("all")
public class XawJvmModelInferrer extends AbstractModelInferrer {
  /**
   * convenience API to build and initialize JVM types and their members.
   */
  @Inject
  @Extension
  private JvmTypesBuilder _jvmTypesBuilder;
  
  @Inject
  @Extension
  private TypeReferences _typeReferences;
  
  protected void _infer(final Xaw xaw, final IJvmDeclaredTypeAcceptor acceptor, final boolean isPreIndexingPhase) {
    final Procedure1<JvmGenericType> _function = (JvmGenericType it) -> {
      EList<JvmTypeReference> _superTypes = it.getSuperTypes();
      JvmTypeReference _typeRef = this._typeReferenceBuilder.typeRef(Runnable.class);
      this._jvmTypesBuilder.<JvmTypeReference>operator_add(_superTypes, _typeRef);
    };
    final JvmGenericType clazz = this._jvmTypesBuilder.toClass(xaw, xaw.getQName(), _function);
    final Procedure1<JvmGenericType> _function_1 = (JvmGenericType it) -> {
      EList<JvmMember> _members = it.getMembers();
      final Procedure1<JvmOperation> _function_2 = (JvmOperation it_1) -> {
        it_1.setVisibility(JvmVisibility.PUBLIC);
        final JvmOperation method = it_1;
        this._jvmTypesBuilder.setBody(it_1, xaw);
      };
      JvmOperation _method = this._jvmTypesBuilder.toMethod(xaw, "run", this._typeReferenceBuilder.typeRef(Void.TYPE), _function_2);
      this._jvmTypesBuilder.<JvmOperation>operator_add(_members, _method);
      EList<JvmMember> _members_1 = it.getMembers();
      final Procedure1<JvmOperation> _function_3 = (JvmOperation it_1) -> {
        it_1.setVisibility(JvmVisibility.PUBLIC);
        it_1.setStatic(true);
        EList<JvmFormalParameter> _parameters = it_1.getParameters();
        JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(xaw, "args", this._typeReferences.createArrayType(this._typeReferenceBuilder.typeRef(String.class)));
        this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
        final Procedure1<ITreeAppendable> _function_4 = (ITreeAppendable it_2) -> {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("new ");
          String _simpleName = clazz.getSimpleName();
          _builder.append(_simpleName);
          _builder.append("().run();");
          it_2.append(_builder);
        };
        this._jvmTypesBuilder.setBody(it_1, _function_4);
      };
      JvmOperation _method_1 = this._jvmTypesBuilder.toMethod(xaw, "main", this._typeReferenceBuilder.typeRef(Void.TYPE), _function_3);
      this._jvmTypesBuilder.<JvmOperation>operator_add(_members_1, _method_1);
      final Consumer<XMethod> _function_4 = (XMethod it_1) -> {
        this.inferMethod(clazz, it_1);
      };
      xaw.getMethods().forEach(_function_4);
    };
    acceptor.<JvmGenericType>accept(clazz, _function_1);
  }
  
  public boolean inferMethod(final JvmGenericType jvmClass, final XMethod xMethod) {
    EList<JvmMember> _members = jvmClass.getMembers();
    final Procedure1<JvmOperation> _function = (JvmOperation it) -> {
      it.setVisibility(JvmVisibility.PRIVATE);
      int paramNum = 1;
      EList<JvmFormalParameter> _parameters = xMethod.getParameters();
      for (final JvmFormalParameter parameter : _parameters) {
        {
          String _elvis = null;
          String _name = parameter.getName();
          if (_name != null) {
            _elvis = _name;
          } else {
            _elvis = ("arg" + Integer.valueOf(paramNum));
          }
          final JvmFormalParameter formalParameter = this._jvmTypesBuilder.toParameter(parameter, _elvis, parameter.getParameterType());
          EList<JvmFormalParameter> _parameters_1 = it.getParameters();
          this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters_1, formalParameter);
          paramNum++;
        }
      }
      this._jvmTypesBuilder.setBody(it, xMethod.getBody());
    };
    JvmOperation _method = this._jvmTypesBuilder.toMethod(xMethod, xMethod.getName(), xMethod.getReturnType(), _function);
    return this._jvmTypesBuilder.<JvmOperation>operator_add(_members, _method);
  }
  
  public void infer(final EObject xaw, final IJvmDeclaredTypeAcceptor acceptor, final boolean isPreIndexingPhase) {
    if (xaw instanceof Xaw) {
      _infer((Xaw)xaw, acceptor, isPreIndexingPhase);
      return;
    } else if (xaw != null) {
      _infer(xaw, acceptor, isPreIndexingPhase);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(xaw, acceptor, isPreIndexingPhase).toString());
    }
  }
}
